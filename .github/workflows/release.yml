name: Release
on:
  push:
    
    
env:
  BIN_NAME: chaos-lambda-extension
  PROJECT_NAME: chaos-lambda-extension
jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, aarch64-linux] 
        include:
        - build: x86_64-linux
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
        - build: aarch64-linux
          os: ubuntu-20.04
          rust: stable
          target: aarch64-unknown-linux-gnu
          cross: true

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: install cargo lambda
        run: pip3 install cargo-lambda
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: test
          args: --release --locked --target ${{ matrix.target }} -- --test-threads=1
      - uses: taiki-e/install-action@just
      - name: Build release binary 
        run: just build-extension release ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' 
        run: strip "./target/lambda/extensions/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            ./target/lambda/extensions/$BIN_NAME

      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          cp "./target/lambda/extensions/$BIN_NAME" "dist/"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::871265522301:role/GitHub-Deploy-Layers-Role
          role-session-name: GitHubActionsSession
      - name: Upload layer to us-east-1
        run: just deploy-extension release us-east-1 ${{ matrix.target }} 
      - name: Upload layer to us-east-2
        run: just deploy-extension release us-east-2 ${{ matrix.target }} 
      - name: Upload layer to us-west-1
        run: just deploy-extension release us-west-1 ${{ matrix.target }}
      - name: Upload layer to us-west-2
        run: just deploy-extension release us-west-2 ${{ matrix.target }} 
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: bins-${{ matrix.build }}
          path: dist
  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    outputs: 
      tagname: ${{ steps.tagname.outputs.val }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
      - run: ls -al bins-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"
      